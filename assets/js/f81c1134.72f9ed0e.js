"use strict";(self.webpackChunkportfolio_portal=self.webpackChunkportfolio_portal||[]).push([[130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"pbi-bpa-rules","metadata":{"permalink":"/blog/pbi-bpa-rules","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-12-29-pbi-rules.md","source":"@site/blog/2024-12-29-pbi-rules.md","title":"Power BI Data Model - Best Practice Analyzer (BPA)","description":"Knowing general best practices for the PBI data model optimization, such as avoiding bi-directional relationships, reducing the column cardinality, avoiding DirectQuery whenever possible, or removing Auto Date/Time hidden tables, still remains the key requirement! But, Tabular Editor may help you quickly and easily identify potential violations of these practices \u2014 based on the insight gained, you can then decide if you want to apply the recommended practice(s) or keep your original data modeling logic in place through Best Practice Analyzer (BPA) tools.","date":"2024-12-29T00:00:00.000Z","tags":[{"inline":false,"label":"Data Governanace","permalink":"/blog/tags/data-governence","description":"Data Governanace Disscussion"}],"readingTime":0.86,"hasTruncateMarker":true,"authors":[{"name":"Lewis Quoc Quang","title":"Solution Architect @ Rackspace","url":"https://www.linkedin.com/in/trinh-quoc-quang/","page":{"permalink":"/blog/authors/lewis"},"socials":{"github":"https://github.com/QuangTrinh1612","linkedin":"https://www.linkedin.com/in/trinh-quoc-quang/"},"imageURL":"https://avatars.githubusercontent.com/u/55908196?s=400&u=401c81ca1269100ff4dcf3ddcf11a1ff035cab42&v=4","key":"lewis"}],"frontMatter":{"slug":"pbi-bpa-rules","title":"Power BI Data Model - Best Practice Analyzer (BPA)","authors":["lewis"],"tags":["Data Governance"]},"unlisted":false,"nextItem":{"title":"Multitable SCD2 Joins - How to Unify Historical Changes","permalink":"/blog/multitable-scd2-joins"}},"content":"Knowing general best practices for the PBI data model optimization, such as avoiding bi-directional relationships, reducing the column cardinality, avoiding DirectQuery whenever possible, or removing Auto Date/Time hidden tables, still remains the key requirement! But, Tabular Editor may help you quickly and easily identify potential violations of these practices \u2014 based on the insight gained, you can then decide if you want to apply the recommended practice(s) or keep your original data modeling logic in place through Best Practice Analyzer (BPA) tools.\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n*And the best thing is that you can run BPA rules on your .bim file prior to CICD deployment to make sure the deployment is validated.*\\r\\n\\r\\nFor example:\\r\\n- Do not use floating point data types\\r\\n- Don\u2019t summarize numeric columns\\r\\n\\r\\n# Working with BPA Rules\\r\\n## Load BPA Rules\\r\\nWe can download the list of default BPA rules from this github (link) then import directly into tabular editor exe.\\r\\n1. To load the BPA rules, select the C# Script tab.\\r\\n2. Paste in the following script."},{"id":"multitable-scd2-joins","metadata":{"permalink":"/blog/multitable-scd2-joins","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-12-29-scd2.md","source":"@site/blog/2024-12-29-scd2.md","title":"Multitable SCD2 Joins - How to Unify Historical Changes","description":"In the realm of data management, historical changes are conventionally stored in separate Slowly Changing Dimension Type 2 (SCD2) tables. However, extracting point-in-time insights from these dispersed sources requires merging them into a single, unified entity.","date":"2024-12-29T00:00:00.000Z","tags":[{"inline":false,"label":"Data Model","permalink":"/blog/tags/data-model","description":"Data Model Disscussion"}],"readingTime":5.11,"hasTruncateMarker":true,"authors":[{"name":"Lewis Quoc Quang","title":"Solution Architect @ Rackspace","url":"https://www.linkedin.com/in/trinh-quoc-quang/","page":{"permalink":"/blog/authors/lewis"},"socials":{"github":"https://github.com/QuangTrinh1612","linkedin":"https://www.linkedin.com/in/trinh-quoc-quang/"},"imageURL":"https://avatars.githubusercontent.com/u/55908196?s=400&u=401c81ca1269100ff4dcf3ddcf11a1ff035cab42&v=4","key":"lewis"}],"frontMatter":{"slug":"multitable-scd2-joins","title":"Multitable SCD2 Joins - How to Unify Historical Changes","authors":["lewis"],"tags":["Data Model"]},"unlisted":false,"prevItem":{"title":"Power BI Data Model - Best Practice Analyzer (BPA)","permalink":"/blog/pbi-bpa-rules"}},"content":"In the realm of data management, historical changes are conventionally stored in separate Slowly Changing Dimension Type 2 (SCD2) tables. However, extracting point-in-time insights from these dispersed sources requires merging them into a single, unified entity.\\r\\n\\r\\nThis guide offers a succinct walkthrough of the process for performing multitable SCD2 joins, presenting two distinct approaches, Direct Join and Unified Timeline, evaluating their respective advantages and drawbacks through practical examples.\\r\\n\\r\\nLet\u2019s see how to effectively unify historical data and derive valuable insights\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Intent\\r\\nIn data warehousing, Slowly Changing Dimension Type 2 (SCD2) tables are widely used to track historical changes in dimension data. However, joining SCD2 tables correctly requires a specific approach to ensure accurate results. This article provides an understanding of the challenges involved and a step-by-step guide to implement robust joins for SCD2 tables.\\r\\n\\r\\n## Problem\\r\\nWhy is joining SCD2 tables challenging?\\r\\nSCD2 tables are designed to maintain historical data by creating new rows with updated attributes and validity periods. This introduces two main challenges:\\r\\n- Temporal Overlap: The same business key can exist in multiple rows, each representing a different validity period.\\r\\n- Point-in-Time Accuracy: Joining two SCD2 tables must align rows that were valid at the same point in time to ensure accurate results.\\r\\nA naive join may result in duplications or mismatched records due to overlapping validity periods.\\r\\n\\r\\n## Solution\\r\\n### Method 1: Direct Join with 02 SCD2 tables\\r\\n\\r\\n1. Perform this join condition that enables merging 2 rows that are in the same validity period\\r\\n\\r\\n```sql\\r\\nfrom scd2_table1 t1\\r\\njoin scd2_table2 t2\\r\\n  on t1.pk = t2.pk\\r\\n  and t1.valid_from < t2.valid_to \\r\\n  and t1.valid_to > t2.valid_from\\r\\n```\\r\\n\\r\\n2. Recalculate `valid_from` & `valid_to`\\r\\n- `valid_from` should be the latest one of the 2 `valid_from` of the 2 tables\\r\\n- `valid_to` should be the earliest one of the 2 `valid_to` of the 2 tables\\r\\n\\r\\n```sql\\r\\ngreatest(t1.valid_from, coalesce(t2.valid_from, \'1900-01-01\'::timestamp)) as valid_from,\\r\\ncoalesce(lead(greatest(t1.valid_from, coalesce(t2.valid_from, \'1900-01-01\'::timestamp)))\\r\\n    over (partition by t1.pk\\r\\n    order by greatest(t1.valid_from, coalesce(t2.valid_from, \'1900-01-01\'::timestamp))), \\r\\n          \'9999-12-31\'::timestamp) as valid_to\\r\\n```\\r\\n\\r\\n3. Filter out rows with `valid_from = valid_to` after join to avoid duplicated validity intervals\\r\\n\\r\\nIn most of real-life examples, `valid_from` and `valid_to` are usually in lower time granularity like timestamp (with the differences down to seconds), hence there might not be cases where these column value \u201coverlapped\u201d across multiple SCD2 tables and we might skip this step. However, for an overall solution, this should be a part of your joining condition.\\r\\n\\r\\n4. Combine them all together\\r\\n\\r\\n```sql\\r\\nwith\\r\\n    prep1 as (\\r\\n        select\\r\\n            t1.pk,\\r\\n            dim1,\\r\\n            dim2,\\r\\n            greatest(t1.valid_from, coalesce(t2.valid_from, \'1900-01-01\'::timestamp)) as valid_from,\\r\\n            coalesce(lead(greatest(t1.valid_from, coalesce(t2.valid_from, \'1900-01-01\'::timestamp)))\\r\\n                over (partition by t1.pk\\r\\n                order by greatest(t1.valid_from, coalesce(t2.valid_from, \'1900-01-01\'::timestamp))), \\r\\n                     \'9999-12-31\'::timestamp) as valid_to\\r\\n        from scd2_table1 t1\\r\\n        join scd2_table2 t2\\r\\n            on t1.pk = t2.pk\\r\\n            and t1.valid_from < t2.valid_to \\r\\n            and t1.valid_to > t2.valid_from\\r\\n    )\\r\\n\\r\\nselect \\r\\n    *\\r\\nfrom prep1\\r\\nwhere valid_from != valid_to\\r\\norder by PK, valid_from, valid_to, dim1, dim2\\r\\n```\\r\\n\\r\\n### Method 2: Unified timeline\\r\\nThis approach to multitable SCD2 joins first creates a unified timeline based on all the `valid_from` from referenced SCD2s. This timeline will be used as a scaffold for joining back all the SCD2s later on. Unlike Direct Join, the deduplication & `valid_to` recalculation steps are done during timeline unification. This allows us to execute all SCD2 joins in 1 CTE instead.\\r\\n\\r\\nNote that the process is quite similar when joining 02, 03 or more SCD2s:\\r\\n- Union PKs, `valid_from` from subsequent SCD2s;\\r\\n- Deduplicate the unioned table to make the following calculation lighter;\\r\\n- Recalculate `valid_to` from the unioned data to create the timeline;\\r\\n- Join subsequent SCD2s back to the timeline using this condition below. Repeat for all SCD2s.\\r\\n\\r\\n#### Unified timeline \u2013 Code Snippets\\r\\n\\r\\n```sql\\r\\nwith\\r\\n    unified_timeline as ( -- using union to deal with duplicates values instead of union all\\r\\n        select pk, valid_from from scd2_table1 union\\r\\n        select pk, valid_from from scd2_table2 union\\r\\n        select pk, valid_from from scd2_table3\\r\\n    ),\\r\\n    unified_timeline_recalculate_valid_to as (\\r\\n        select\\r\\n            pk,\\r\\n            valid_from,\\r\\n            coalesce(lead(valid_from) over(partition by pk order by valid_from), \'9999-12-31\'::timestamp) as valid_to,\\r\\n            valid_to = \'9999-12-31\'::timestamp as is_current\\r\\n        from unified_timeline\\r\\n    ),\\r\\n    joined as (\\r\\n        select\\r\\n            timeline.pk,\\r\\n            scd2_table1.dim1,\\r\\n            scd2_table2.dim2,\\r\\n            scd2_table3.dim3,\\r\\n            coalesce(timeline.valid_from, \'1900-01-01\'::timestamp) as valid_from,\\r\\n            coalesce(timeline.valid_to, \'9999-12-31\'::timestamp) as valid_to\\r\\n        from unified_timeline_recalculate_valid_to as timeline\\r\\n        left join scd2_table1\\r\\n            on timeline.pk = scd2_table1.pk \\r\\n            and scd2_table1.valid_from <= timeline.valid_from \\r\\n            and scd2_table1.valid_to >= timeline.valid_to\\r\\n        left join scd2_table2\\r\\n            on timeline.pk = scd2_table2.pk \\r\\n            and scd2_table2.valid_from <= timeline.valid_from \\r\\n            and scd2_table2.valid_to >= timeline.valid_to\\r\\n        left join scd2_table3\\r\\n            on timeline.pk = scd2_table1.pk \\r\\n            and scd2_table3.valid_from <= timeline.valid_from \\r\\n            and scd2_table3.valid_to >= timeline.valid_to\\r\\n    \\r\\n    )\\r\\nselect * from joined\\r\\n-- where valid_from != valid_to -- As we already have a distinct timeline (using union), this condition is no longer needed\\r\\norder by PK, valid_from, valid_to, dim1, dim2, dim3;\\r\\n```\\r\\n\\r\\n## Pros and Cons of Two Methods for Joining SCD2 Tables\\r\\n\\r\\n### Direct Joins\\r\\n| **Pros**                           | **Cons**                              |\\r\\n|------------------------------------|---------------------------------------|\\r\\n| Simple to implement and understand.| Can result in incorrect joins if overlapping validity periods exist. |\\r\\n| Efficient for small datasets.      | Requires careful handling of `valid_to` (e.g., NULL values).          |\\r\\n| No need for pre-processing.        | May fail to align records accurately in complex scenarios.            |\\r\\n\\r\\n### Unified Timeline Method\\r\\n| **Pros**                           | **Cons**                              |\\r\\n|------------------------------------|---------------------------------------|\\r\\n| Ensures accurate alignment of records across tables. | More complex to implement and requires additional processing. |\\r\\n| Handles overlapping validity periods effectively. | May require significant compute resources for large datasets. |\\r\\n| Suitable for point-in-time analysis and historical consistency. | Slightly slower due to timeline unification steps.           |\\r\\n\\r\\nBy following these steps, you can reliably join SCD2 tables while maintaining historical and point-in-time accuracy. Proper implementation ensures accurate data analysis and minimizes the risk of logical errors in your data pipeline.\\r\\n\\r\\n## Summary\\r\\n- **Problem**: Joining SCD2 tables can be challenging due to overlapping validity periods and the need for point-in-time accuracy.\\r\\n- **Solution**: To address this, filter records using the valid_from and valid_to columns and perform a temporal join based on both business keys and validity periods.\\r\\n- **Implementation**: The solution is implemented using SQL, with a focus on defining a point-in-time context, filtering valid records, and aligning temporal validity.\\r\\n- **Comparison of Methods**:\\r\\n    - Direct Joins: Simple to implement but prone to errors with overlapping periods.\\r\\n    - Unified Timeline Method: Ensures accuracy but is more complex and resource-intensive."}]}}')}}]);