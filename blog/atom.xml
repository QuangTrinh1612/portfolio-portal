<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lewisblog.github.io/portfolio-portal/blog</id>
    <title>Lewis Website Blog</title>
    <updated>2025-01-07T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lewisblog.github.io/portfolio-portal/blog"/>
    <subtitle>Lewis Website Blog</subtitle>
    <icon>https://lewisblog.github.io/portfolio-portal/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Spark Optimization - Reducing Shuffle]]></title>
        <id>https://lewisblog.github.io/portfolio-portal/blog/spark-shuffle</id>
        <link href="https://lewisblog.github.io/portfolio-portal/blog/spark-shuffle"/>
        <updated>2025-01-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[‚ÄúShuffling is the only thing which Nature cannot undo.‚Äù ‚Äî Arthur Eddington]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>‚ÄúShuffling is the only thing which Nature cannot undo.‚Äù ‚Äî <strong>Arthur Eddington</strong></p>
</blockquote>
<p>I used to see people playing cards and using the word ‚ÄúShuffle‚Äù even before I knew how to play it. Shuffling in cards, play a very critical role to distribute ‚Äúpower‚Äù, adding weightage to a player‚Äôs hand. It is nothing but adding the <em>randomness</em> in selection. When we want to distribute the cards for various games for example <a href="https://en.wikipedia.org/wiki/Contract_bridge" target="_blank" rel="noopener noreferrer"><em>contract bridge</em></a> shuffle is the way to create even/uneven distribution to 4 hands.</p>
<p><img decoding="async" loading="lazy" src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Bridge-Gro%C3%9Fschlemm.JPG/2560px-Bridge-Gro%C3%9Fschlemm.JPG" alt="Sweet hand" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="well-enough-of-playing-cards">Well, enough of playing cards!<a href="https://lewisblog.github.io/portfolio-portal/blog/spark-shuffle#well-enough-of-playing-cards" class="hash-link" aria-label="Direct link to Well, enough of playing cards!" title="Direct link to Well, enough of playing cards!">‚Äã</a></h2>
<p>Let us understand how shuffle impacts big data computation. Ah, yes I think again I will use card shuffle to explain you. üòÄ</p>
<p><img decoding="async" loading="lazy" src="https://www.casino.org/blog/wp-content/uploads/shutterstock_417009952-875x583.jpg" alt="Chaos! I love that!" class="img_ev3q"></p>
<p>Look at the above image and give me the answers of the below questions.</p>
<ul>
<li>How many black cards are present? ‚ô†Ô∏è‚ô£Ô∏è</li>
<li>How many of the red cards have numbers greater than 4? ‚ô•Ô∏è‚ô¶Ô∏è</li>
<li>How many high value cards(showing off my knowledge eh!) are left in clubs? ‚ô£Ô∏è</li>
</ul>
<p>No need to explain that you will tell me, ‚ÄúYes, I can give you answers but let me arrange them first.‚Äù Then you will do what is shown here.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-shuffle-in-big-data-world">The Shuffle in Big Data World<a href="https://lewisblog.github.io/portfolio-portal/blog/spark-shuffle#the-shuffle-in-big-data-world" class="hash-link" aria-label="Direct link to The Shuffle in Big Data World" title="Direct link to The Shuffle in Big Data World">‚Äã</a></h2>
<p>To answer my questions you must do the arrangement to order cards of same packs together like the above image. That means you need to find all cards of same family one by one and them order then A to K or vice versa. This operation of moving cards(data) to seek and order is actually called <em>Shuffle</em> in big data world.</p>
<p>Imagine a situation when you are processing 1000s of GBs of data joining with similar magnitude and answering similar questions of different grains and groups. Yes, in distributed computing world exchanging data across machines, across networks creates so much exchange(I/O) that it slows down the computing process. Shuffle alone cause multiple stages in a big data job and delays the outcome.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-does-shuffle-work-in-spark">How does shuffle work in Spark?<a href="https://lewisblog.github.io/portfolio-portal/blog/spark-shuffle#how-does-shuffle-work-in-spark" class="hash-link" aria-label="Direct link to How does shuffle work in Spark?" title="Direct link to How does shuffle work in Spark?">‚Äã</a></h3>
<p><img decoding="async" loading="lazy" src="https://miro.medium.com/v2/resize:fit:4800/format:webp/1*HZelhB9lKu5NjdOwivQDjQ.png" alt="Spark Shuffle" class="img_ev3q"></p>
<p>In Apache Spark, <strong><em>Shuffle</em></strong> describes the procedure in between reduce task and map task. Shuffling refers to the shuffle of data given. This operation is considered the costliest .The <a href="https://stackoverflow.com/questions/31386590/when-does-shuffling-occur-in-apache-spark" target="_blank" rel="noopener noreferrer">shuffle operation</a> is implemented differently in Spark compared to Hadoop.</p>
<p>On the <strong>map side</strong>, each map task in Spark writes out a shuffle file (OS disk buffer) for every reducer ‚Äî which corresponds to a logical block in Spark. These files are not intermediary in the sense that Spark does not merge them into larger partitioned ones. Since scheduling overhead in Spark is lesser, the number of mappers (<code>M</code>) and reducers(<code>R</code>) is far higher than in Hadoop. Thus, shipping <code>M*R</code> files to the respective reducers could result in significant overheads.</p>
<p>Similar to Hadoop, Spark also provide a parameter <code>spark.shuffle.compress</code> to specify compression libraries to compress map outputs. In this case, it could be <code>Snappy</code> (by default) or <code>LZF</code>. <code>Snappy</code> uses only 33KB of buffer for each opened file and significantly reduces risk of encountering out-of-memory errors.</p>
<p>On the <strong>reduce side</strong>, Spark requires all shuffled data to fit into memory of the corresponding reducer task. This would of course happen only in cases where the reducer task demands all shuffled data for a <code>GroupByKey</code> or a <code>ReduceByKey</code> operation, for instance. Spark throws an out-of-memory exception in this case, which has been quite a challenge because when spark spills over to disk it creates more problem of I/O and read slowness.</p>
<p>Also with Spark there is no overlapping copy phase, unlike Hadoop that has an overlapping copy phase where mappers push data to the reducers even before map is complete. This means that the shuffle is a <em>pull</em> operation in Spark, compared to a <em>push</em> operation in Hadoop. Each reducer should also maintain a network buffer to fetch map outputs. Size of this buffer is specified through the parameter <code>spark.reducer.maxMbInFlight</code> (by default, it is 48MB).</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tuning-spark-to-reduce-shuffle">Tuning Spark to reduce shuffle<a href="https://lewisblog.github.io/portfolio-portal/blog/spark-shuffle#tuning-spark-to-reduce-shuffle" class="hash-link" aria-label="Direct link to Tuning Spark to reduce shuffle" title="Direct link to Tuning Spark to reduce shuffle">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="sparksqlshufflepartitions">spark.sql.shuffle.partitions<a href="https://lewisblog.github.io/portfolio-portal/blog/spark-shuffle#sparksqlshufflepartitions" class="hash-link" aria-label="Direct link to spark.sql.shuffle.partitions" title="Direct link to spark.sql.shuffle.partitions">‚Äã</a></h3>
<p>The Spark SQL shuffle is a mechanism for redistributing or re-partitioning data so that the data is grouped differently across partitions. It is typically based on the volume of data you might have to reduce or increase the number of partitions of RDD/DataFrame using <code>spark.sql.shuffle.partitions</code> configuration or through code.</p>
<p>Using this configuration we can control the number of partitions of shuffle operations. By default, its value is <code>200</code>. But, 200 partitions does not make any sense if we have files of few GB(s). So, we should change them according to the amount of data we need to process via Spark SQL.</p>
<p>Let‚Äôs see a practical difference. Here I am creating a small two small dataframes with the most popular employee, department with two employees Daniel and me.</p>
<p>The default value of <code>spark.sql.shuffle.partitions</code> is 200. Let us run with default and see how much time it takes.</p>
<blockquote>
<p>Time taken : <strong>6060 ms</strong> with spark.sql.shuffle.partitions = 200</p>
</blockquote>
<p>Now, if we do some modification with the config as we don‚Äôt need 200 shuffle partitions for this such small amount of data if can be done faster. Here I am setting it to 2.</p>
<blockquote>
<p>Time taken : <strong>398 ms</strong> with spark.sql.shuffle.partitions = 2</p>
</blockquote>
<p>So, you can see tweaking the shuffle partition alone made it 15 times faster.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="reduce-dataset-size">Reduce dataSet size<a href="https://lewisblog.github.io/portfolio-portal/blog/spark-shuffle#reduce-dataset-size" class="hash-link" aria-label="Direct link to Reduce dataSet size" title="Direct link to Reduce dataSet size">‚Äã</a></h2>
<p>The classic rule of ETL. Filter as much as data near to the source is much important in spark as well. If you are dealing with lot of data, which has very fine grained aggregates and joins, it is pretty obvious there would be shuffles. It is always essential to control number of records before you start joins/aggregates so that data volume gets reduced by some %. Use appropriate filter predicates in your SQL query so Spark can push them down to the underlying datasource. Selective predicates are good. Use them as appropriate. Use partition filters if they are applicable.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="broadcast-broadcast-broadcast">Broadcast Broadcast Broadcast<a href="https://lewisblog.github.io/portfolio-portal/blog/spark-shuffle#broadcast-broadcast-broadcast" class="hash-link" aria-label="Direct link to Broadcast Broadcast Broadcast" title="Direct link to Broadcast Broadcast Broadcast">‚Äã</a></h2>
<p>When you join two datasets, one large and one small the best option in Spark is to perform a broadcast join (map-side join). With broadcast join, you can very effectively join a large table (fact) with relatively small tables (dimensions) by avoiding sending all data of the large table over the network.</p>
<p>You can use broadcast function to mark a dataset to be broadcasted when used in a join operator. It uses spark.sql.autoBroadcastJoinThreshold setting to control the size of a table that will be broadcast to all worker nodes when performing a join.</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+ BROADCAST(B) */</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> TableA A </span><span class="token keyword" style="color:#00009f">INNER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">JOIN</span><span class="token plain"> TableB B </span><span class="token keyword" style="color:#00009f">ON</span><span class="token plain"> A</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">key</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> B</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">key</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This technique will broadcast the entire table B to all the executors and will help spark to avoid shuffle. The joins will will be local to all executors and thus it won‚Äôt be needed any data to come across machines and there won‚Äôt be any shuffle.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="more-shuffles-vs-lesser-shuffles">More Shuffles vs Lesser Shuffles<a href="https://lewisblog.github.io/portfolio-portal/blog/spark-shuffle#more-shuffles-vs-lesser-shuffles" class="hash-link" aria-label="Direct link to More Shuffles vs Lesser Shuffles" title="Direct link to More Shuffles vs Lesser Shuffles">‚Äã</a></h2>
<hr>
<p>Some times we encounter situations where we are joining multiple datasets but based on different keys. For example, let‚Äôs check the sqls below.</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> TableA A </span><span class="token keyword" style="color:#00009f">INNER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">JOIN</span><span class="token plain"> TableB B </span><span class="token keyword" style="color:#00009f">ON</span><span class="token plain"> A</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> B</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> TableB B </span><span class="token keyword" style="color:#00009f">INNER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">JOIN</span><span class="token plain"> TableC C </span><span class="token keyword" style="color:#00009f">ON</span><span class="token plain"> B</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key2</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>It is evident that if we consider that while we read A and B it may or may not be partitioned to support the second join that means if we try to execute the joins without any such optimisation technique it might cause more shuffles. Key1 and Key2 across executors will not be evenly distributed. So in such cases we prefer to do repartition B or C accordingly. Repartition can be done on a column with a number specified or we can just do it with a random number which is suitable and comparable with the number of executor and core combination.</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+ REPARTITION(key2)*/</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> TableB B</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There are many other techniques to overcome shuffles which you will come across as much you start dealing with production level problems. I think the above ones are definitely the most important to start with.</p>
<p>For any type of help regarding career counselling, resume building, discussing designs or know more about latest data engineering trends and technologies reach out to me at <a href="https://www.linkedin.com/in/anigos/" target="_blank" rel="noopener noreferrer"><em>anigos</em></a><em>.</em></p>
<p><strong><em>P.S : I don‚Äôt charge money</em></strong></p>]]></content>
        <author>
            <name>Lewis Quoc Quang</name>
            <uri>https://www.linkedin.com/in/trinh-quoc-quang/</uri>
        </author>
        <category label="Spark" term="Spark"/>
        <category label="Shuffles" term="Shuffles"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Power BI Data Model - Best Practice Analyzer (BPA)]]></title>
        <id>https://lewisblog.github.io/portfolio-portal/blog/pbi-bpa-rules</id>
        <link href="https://lewisblog.github.io/portfolio-portal/blog/pbi-bpa-rules"/>
        <updated>2024-12-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Knowing general best practices for the PBI data model optimization, such as avoiding bi-directional relationships, reducing the column cardinality, avoiding DirectQuery whenever possible, or removing Auto Date/Time hidden tables, still remains the key requirement! But, Tabular Editor may help you quickly and easily identify potential violations of these practices ‚Äî based on the insight gained, you can then decide if you want to apply the recommended practice(s) or keep your original data modeling logic in place through Best Practice Analyzer (BPA) tools.]]></summary>
        <content type="html"><![CDATA[<p>Knowing general best practices for the PBI data model optimization, such as avoiding bi-directional relationships, reducing the column cardinality, avoiding DirectQuery whenever possible, or removing Auto Date/Time hidden tables, still remains the key requirement! But, Tabular Editor may help you quickly and easily identify potential violations of these practices ‚Äî based on the insight gained, you can then decide if you want to apply the recommended practice(s) or keep your original data modeling logic in place through Best Practice Analyzer (BPA) tools.</p>
<p><em>And the best thing is that you can run BPA rules on your .bim file prior to CICD deployment to make sure the deployment is validated.</em></p>
<p>For example:</p>
<ul>
<li>Do not use floating point data types</li>
<li>Don‚Äôt summarize numeric columns</li>
</ul>
<h1>Working with BPA Rules</h1>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="load-bpa-rules">Load BPA Rules<a href="https://lewisblog.github.io/portfolio-portal/blog/pbi-bpa-rules#load-bpa-rules" class="hash-link" aria-label="Direct link to Load BPA Rules" title="Direct link to Load BPA Rules">‚Äã</a></h2>
<p>We can download the list of default BPA rules from this github (link) then import directly into tabular editor exe.</p>
<ol>
<li>To load the BPA rules, select the C# Script tab.</li>
<li>Paste in the following script.</li>
</ol>]]></content>
        <author>
            <name>Lewis Quoc Quang</name>
            <uri>https://www.linkedin.com/in/trinh-quoc-quang/</uri>
        </author>
        <category label="Data Governanace" term="Data Governanace"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Multitable SCD2 Joins - How to Unify Historical Changes]]></title>
        <id>https://lewisblog.github.io/portfolio-portal/blog/multitable-scd2-joins</id>
        <link href="https://lewisblog.github.io/portfolio-portal/blog/multitable-scd2-joins"/>
        <updated>2024-12-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In the realm of data management, historical changes are conventionally stored in separate Slowly Changing Dimension Type 2 (SCD2) tables. However, extracting point-in-time insights from these dispersed sources requires merging them into a single, unified entity.]]></summary>
        <content type="html"><![CDATA[<p>In the realm of data management, historical changes are conventionally stored in separate Slowly Changing Dimension Type 2 (SCD2) tables. However, extracting point-in-time insights from these dispersed sources requires merging them into a single, unified entity.</p>
<p>This guide offers a succinct walkthrough of the process for performing multitable SCD2 joins, presenting two distinct approaches, Direct Join and Unified Timeline, evaluating their respective advantages and drawbacks through practical examples.</p>
<p>Let‚Äôs see how to effectively unify historical data and derive valuable insights</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="intent">Intent<a href="https://lewisblog.github.io/portfolio-portal/blog/multitable-scd2-joins#intent" class="hash-link" aria-label="Direct link to Intent" title="Direct link to Intent">‚Äã</a></h2>
<p>In data warehousing, Slowly Changing Dimension Type 2 (SCD2) tables are widely used to track historical changes in dimension data. However, joining SCD2 tables correctly requires a specific approach to ensure accurate results. This article provides an understanding of the challenges involved and a step-by-step guide to implement robust joins for SCD2 tables.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="problem">Problem<a href="https://lewisblog.github.io/portfolio-portal/blog/multitable-scd2-joins#problem" class="hash-link" aria-label="Direct link to Problem" title="Direct link to Problem">‚Äã</a></h2>
<p>Why is joining SCD2 tables challenging?
SCD2 tables are designed to maintain historical data by creating new rows with updated attributes and validity periods. This introduces two main challenges:</p>
<ul>
<li>Temporal Overlap: The same business key can exist in multiple rows, each representing a different validity period.</li>
<li>Point-in-Time Accuracy: Joining two SCD2 tables must align rows that were valid at the same point in time to ensure accurate results.
A naive join may result in duplications or mismatched records due to overlapping validity periods.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="solution">Solution<a href="https://lewisblog.github.io/portfolio-portal/blog/multitable-scd2-joins#solution" class="hash-link" aria-label="Direct link to Solution" title="Direct link to Solution">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="method-1-direct-join-with-02-scd2-tables">Method 1: Direct Join with 02 SCD2 tables<a href="https://lewisblog.github.io/portfolio-portal/blog/multitable-scd2-joins#method-1-direct-join-with-02-scd2-tables" class="hash-link" aria-label="Direct link to Method 1: Direct Join with 02 SCD2 tables" title="Direct link to Method 1: Direct Join with 02 SCD2 tables">‚Äã</a></h3>
<ol>
<li>Perform this join condition that enables merging 2 rows that are in the same validity period</li>
</ol>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> scd2_table1 t1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> scd2_table2 t2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pk </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pk</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_to </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_to </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="2">
<li>Recalculate <code>valid_from</code> &amp; <code>valid_to</code></li>
</ol>
<ul>
<li><code>valid_from</code> should be the latest one of the 2 <code>valid_from</code> of the 2 tables</li>
<li><code>valid_to</code> should be the earliest one of the 2 <code>valid_to</code> of the 2 tables</li>
</ul>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">greatest</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">coalesce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1900-01-01'</span><span class="token plain">::</span><span class="token keyword" style="color:#00009f">timestamp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">coalesce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lead</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">greatest</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">coalesce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1900-01-01'</span><span class="token plain">::</span><span class="token keyword" style="color:#00009f">timestamp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">over</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">partition</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pk</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"> greatest</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">coalesce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1900-01-01'</span><span class="token plain">::</span><span class="token keyword" style="color:#00009f">timestamp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token string" style="color:#e3116c">'9999-12-31'</span><span class="token plain">::</span><span class="token keyword" style="color:#00009f">timestamp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> valid_to</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="3">
<li>Filter out rows with <code>valid_from = valid_to</code> after join to avoid duplicated validity intervals</li>
</ol>
<p>In most of real-life examples, <code>valid_from</code> and <code>valid_to</code> are usually in lower time granularity like timestamp (with the differences down to seconds), hence there might not be cases where these column value ‚Äúoverlapped‚Äù across multiple SCD2 tables and we might skip this step. However, for an overall solution, this should be a part of your joining condition.</p>
<ol start="4">
<li>Combine them all together</li>
</ol>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">with</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    prep1 </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pk</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            dim1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            dim2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            greatest</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">coalesce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1900-01-01'</span><span class="token plain">::</span><span class="token keyword" style="color:#00009f">timestamp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">coalesce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lead</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">greatest</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">coalesce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1900-01-01'</span><span class="token plain">::</span><span class="token keyword" style="color:#00009f">timestamp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">over</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">partition</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pk</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"> greatest</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">coalesce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1900-01-01'</span><span class="token plain">::</span><span class="token keyword" style="color:#00009f">timestamp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                     </span><span class="token string" style="color:#e3116c">'9999-12-31'</span><span class="token plain">::</span><span class="token keyword" style="color:#00009f">timestamp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> valid_to</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> scd2_table1 t1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> scd2_table2 t2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pk </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pk</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_to </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_to </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> prep1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> valid_from </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> valid_to</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"> PK</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> valid_to</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dim1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dim2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="method-2-unified-timeline">Method 2: Unified timeline<a href="https://lewisblog.github.io/portfolio-portal/blog/multitable-scd2-joins#method-2-unified-timeline" class="hash-link" aria-label="Direct link to Method 2: Unified timeline" title="Direct link to Method 2: Unified timeline">‚Äã</a></h3>
<p>This approach to multitable SCD2 joins first creates a unified timeline based on all the <code>valid_from</code> from referenced SCD2s. This timeline will be used as a scaffold for joining back all the SCD2s later on. Unlike Direct Join, the deduplication &amp; <code>valid_to</code> recalculation steps are done during timeline unification. This allows us to execute all SCD2 joins in 1 CTE instead.</p>
<p>Note that the process is quite similar when joining 02, 03 or more SCD2s:</p>
<ul>
<li>Union PKs, <code>valid_from</code> from subsequent SCD2s;</li>
<li>Deduplicate the unioned table to make the following calculation lighter;</li>
<li>Recalculate <code>valid_to</code> from the unioned data to create the timeline;</li>
<li>Join subsequent SCD2s back to the timeline using this condition below. Repeat for all SCD2s.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="unified-timeline--code-snippets">Unified timeline ‚Äì Code Snippets<a href="https://lewisblog.github.io/portfolio-portal/blog/multitable-scd2-joins#unified-timeline--code-snippets" class="hash-link" aria-label="Direct link to Unified timeline ‚Äì Code Snippets" title="Direct link to Unified timeline ‚Äì Code Snippets">‚Äã</a></h4>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">with</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    unified_timeline </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">-- using union to deal with duplicates values instead of union all</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> pk</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> valid_from </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> scd2_table1 </span><span class="token keyword" style="color:#00009f">union</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> pk</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> valid_from </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> scd2_table2 </span><span class="token keyword" style="color:#00009f">union</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> pk</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> valid_from </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> scd2_table3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    unified_timeline_recalculate_valid_to </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            pk</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">coalesce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lead</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">valid_from</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">over</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">partition</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"> pk </span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"> valid_from</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'9999-12-31'</span><span class="token plain">::</span><span class="token keyword" style="color:#00009f">timestamp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> valid_to</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            valid_to </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'9999-12-31'</span><span class="token plain">::</span><span class="token keyword" style="color:#00009f">timestamp</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> is_current</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> unified_timeline</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    joined </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            timeline</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pk</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            scd2_table1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dim1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            scd2_table2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dim2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            scd2_table3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dim3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">coalesce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timeline</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1900-01-01'</span><span class="token plain">::</span><span class="token keyword" style="color:#00009f">timestamp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">coalesce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timeline</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_to</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'9999-12-31'</span><span class="token plain">::</span><span class="token keyword" style="color:#00009f">timestamp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> valid_to</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> unified_timeline_recalculate_valid_to </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> timeline</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> scd2_table1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> timeline</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pk </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> scd2_table1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pk </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> scd2_table1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> timeline</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> scd2_table1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_to </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> timeline</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_to</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> scd2_table2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> timeline</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pk </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> scd2_table2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pk </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> scd2_table2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> timeline</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> scd2_table2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_to </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> timeline</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_to</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> scd2_table3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> timeline</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pk </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> scd2_table1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pk </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> scd2_table3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> timeline</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_from </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> scd2_table3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_to </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> timeline</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_to</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> joined</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">-- where valid_from != valid_to -- As we already have a distinct timeline (using union), this condition is no longer needed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"> PK</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> valid_from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> valid_to</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dim1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dim2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dim3</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="pros-and-cons-of-two-methods-for-joining-scd2-tables">Pros and Cons of Two Methods for Joining SCD2 Tables<a href="https://lewisblog.github.io/portfolio-portal/blog/multitable-scd2-joins#pros-and-cons-of-two-methods-for-joining-scd2-tables" class="hash-link" aria-label="Direct link to Pros and Cons of Two Methods for Joining SCD2 Tables" title="Direct link to Pros and Cons of Two Methods for Joining SCD2 Tables">‚Äã</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="direct-joins">Direct Joins<a href="https://lewisblog.github.io/portfolio-portal/blog/multitable-scd2-joins#direct-joins" class="hash-link" aria-label="Direct link to Direct Joins" title="Direct link to Direct Joins">‚Äã</a></h3>
<table><thead><tr><th><strong>Pros</strong></th><th><strong>Cons</strong></th></tr></thead><tbody><tr><td>Simple to implement and understand.</td><td>Can result in incorrect joins if overlapping validity periods exist.</td></tr><tr><td>Efficient for small datasets.</td><td>Requires careful handling of <code>valid_to</code> (e.g., NULL values).</td></tr><tr><td>No need for pre-processing.</td><td>May fail to align records accurately in complex scenarios.</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="unified-timeline-method">Unified Timeline Method<a href="https://lewisblog.github.io/portfolio-portal/blog/multitable-scd2-joins#unified-timeline-method" class="hash-link" aria-label="Direct link to Unified Timeline Method" title="Direct link to Unified Timeline Method">‚Äã</a></h3>
<table><thead><tr><th><strong>Pros</strong></th><th><strong>Cons</strong></th></tr></thead><tbody><tr><td>Ensures accurate alignment of records across tables.</td><td>More complex to implement and requires additional processing.</td></tr><tr><td>Handles overlapping validity periods effectively.</td><td>May require significant compute resources for large datasets.</td></tr><tr><td>Suitable for point-in-time analysis and historical consistency.</td><td>Slightly slower due to timeline unification steps.</td></tr></tbody></table>
<p>By following these steps, you can reliably join SCD2 tables while maintaining historical and point-in-time accuracy. Proper implementation ensures accurate data analysis and minimizes the risk of logical errors in your data pipeline.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="https://lewisblog.github.io/portfolio-portal/blog/multitable-scd2-joins#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">‚Äã</a></h2>
<ul>
<li><strong>Problem</strong>: Joining SCD2 tables can be challenging due to overlapping validity periods and the need for point-in-time accuracy.</li>
<li><strong>Solution</strong>: To address this, filter records using the valid_from and valid_to columns and perform a temporal join based on both business keys and validity periods.</li>
<li><strong>Implementation</strong>: The solution is implemented using SQL, with a focus on defining a point-in-time context, filtering valid records, and aligning temporal validity.</li>
<li><strong>Comparison of Methods</strong>:<!-- -->
<ul>
<li>Direct Joins: Simple to implement but prone to errors with overlapping periods.</li>
<li>Unified Timeline Method: Ensures accuracy but is more complex and resource-intensive.</li>
</ul>
</li>
</ul>]]></content>
        <author>
            <name>Lewis Quoc Quang</name>
            <uri>https://www.linkedin.com/in/trinh-quoc-quang/</uri>
        </author>
        <category label="Data Model" term="Data Model"/>
    </entry>
</feed>